//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\source tt_um_template.tlv 9
//_\SV
   // Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/7335edd12fe1b39521e855e526cc337b853e035f/tlv_lib/fpga_includes.tlv"

`default_nettype none
//_\source tt_um_template.tlv 25

//_\SV

// A simple Makerchip Verilog test bench driving random stimulus.

// Comment out the Makerchip module if not using Makerchip. (Only because Yosys chokes on $urandom.)
/*
module top(input wire clk, input wire reset, input wire [31:0] cyc_cnt, output wire passed, output wire failed);
   logic [7:0] ui_in, uio_in, uo_out, uio_out, uio_oe;
   logic [31:0] r = $urandom();
   assign ui_in = r[7:0];
   assign uio_in = r[15:8];
   logic ena = 1'b0;
   logic rst_n = ! reset;

   // Instantiate the Tiny Tapeout module.
   tt_um_template tt(.*);

   assign passed = cyc_cnt > 100;
   assign failed = 1'b0;
endmodule
// End comment block.
*/

module tt_um_template (
    input  wire [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output wire [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
    input  wire [7:0] uio_in,   // IOs: Bidirectional Input path
    output wire [7:0] uio_out,  // IOs: Bidirectional Output path
    output wire [7:0] uio_oe,   // IOs: Bidirectional Enable path (active high: 0=input, 1=output)
    input  wire       ena,      // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);

   wire reset = ! rst_n;

// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar digit, leds, switch;


//
// Signals declared top-level.
//

// For $slideswitch.
logic [7:0] L0_slideswitch_a0;

// For $sseg_decimal_point_n.
logic L0_sseg_decimal_point_n_a0;

// For $sseg_digit_n.
logic [7:0] L0_sseg_digit_n_a0;

// For $sseg_segment_n.
logic [6:0] L0_sseg_segment_n_a0;


// ---------- Generated Code Ends ----------
//_\TLV
   /* verilator lint_off UNOPTFLAT */
   // Connect Tiny Tapeout I/Os to Virtual FPGA Lab.
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv 839   // Instantiated from tt_um_template.tlv, 66 as: m5+tt_connections()
      assign L0_slideswitch_a0[7:0] = ui_in;
      assign L0_sseg_segment_n_a0[6:0] = uo_out[6:0];
      assign L0_sseg_decimal_point_n_a0 = uo_out[7];
      assign L0_sseg_digit_n_a0[7:0] = 8'b11111110;
   //_\end_source

   // Instantiate the Virtual FPGA Lab.
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv 304   // Instantiated from tt_um_template.tlv, 69 as: m5+board(/top, /fpga, 7, $, , my_design)
      
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv 352   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv, 306 as: m4+thanks(m5__l(306)m5_eval(m5_get(BOARD_THANKS_ARGS)))
         //_/thanks
            
      //_\end_source
      
   
      // Board VIZ.
   
      // Board Image.
      
      //_/fpga_pins
         
         //_/fpga
            //_\source tt_um_template.tlv 15   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv, 337 as: m4+my_design.
            
               // ============================================
               // If you are using TL-Verilog for your design,
               // your TL-Verilog logic goes here.
               // Also provide \viz_js here (for TL-Verilog or Verilog logic).
               // Tiny Tapeout inputs can be referenced as, e.g. *ui_in.
               // Connect Tiny Tapeout outputs at the end of this template.
               // ============================================
            
               // ...
            //_\end_source
   
      // LEDs.
      
   
      // 7-Segment
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv 392   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv, 343 as: m4+fpga_sseg.
         for (digit = 0; digit <= 0; digit++) begin : L1_Digit //_/digit
            
            for (leds = 0; leds <= 7; leds++) begin : L2_Leds //_/leds

               // For $viz_lit.
               logic L2_viz_lit_a0;

               assign L2_viz_lit_a0 = (! L0_sseg_digit_n_a0[digit]) && ! ((leds == 7) ? L0_sseg_decimal_point_n_a0 : L0_sseg_segment_n_a0[leds % 7]);
               
            end
         end
      //_\end_source
   
      // slideswitches
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv 442   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/7335edd12fe1b39521e855e526cc337b853e035f/tlvlib/fpgaincludes.tlv, 346 as: m4+fpga_switch.
         for (switch = 0; switch <= 7; switch++) begin : L1_Switch //_/switch

            // For $viz_switch.
            logic L1_viz_switch_a0;

            assign L1_viz_switch_a0 = L0_slideswitch_a0[switch];
            
         end
      //_\end_source
   
      // pushbuttons
      
   //_\end_source   // 3rd arg selects the board.

/*SV_plus*/
   // =========================================
   // If you are using Verilog for your design,
   // your Verilog logic goes here.
   // =========================================

   // ...


   // Connect Tiny Tapeout outputs.
   // Note that my_design will be under /fpga_pins/fpga.
   assign uo_out = 8'b0;
   assign uio_out = 8'b0;
   assign uio_oe = 8'b0;

endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
